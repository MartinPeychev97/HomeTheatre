// <auto-generated />
using System;
using HomeTheatre.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeTheatre.Data.Migrations
{
    [DbContext(typeof(TheatreContext))]
    [Migration("20200124183746_I")]
    partial class I
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<bool>("HasExpired");

                    b.Property<string>("ReasonBanned")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<Guid>("ReviewId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95501766-3607-4a7a-aa13-a81b50bf9385"),
                            Author = "MemberFirst",
                            CommentText = "Random comment text for firstComment",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(6521),
                            IsDeleted = false,
                            ReviewId = new Guid("c76ab3f4-e445-4e88-9359-a4a171f97862"),
                            UserId = new Guid("4eac031b-26fd-40ba-bacf-603534229f79")
                        },
                        new
                        {
                            Id = new Guid("7720a526-fff3-4cc9-a0f9-ea77453a3e63"),
                            Author = "MemberSecond",
                            CommentText = "Random comment text for Second efin comment",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(7138),
                            IsDeleted = false,
                            ReviewId = new Guid("03383637-e73b-4005-9b16-9a11168240bc"),
                            UserId = new Guid("d73312b2-789c-4569-aadd-d5d9eb411506")
                        },
                        new
                        {
                            Id = new Guid("4f17d309-2034-46b2-99f0-40b3e20bb4b9"),
                            Author = "MemberThird",
                            CommentText = "Random comment text for Third damn comment",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(7144),
                            IsDeleted = false,
                            ReviewId = new Guid("0ba3071d-a4a6-4e26-8923-3745aff05938"),
                            UserId = new Guid("f53f6435-03d8-4567-9edb-48443dd520cc")
                        },
                        new
                        {
                            Id = new Guid("3bda46fd-b1d9-45a1-bbe1-aa03f39ed4d9"),
                            Author = "MemberFourth",
                            CommentText = "Random comment text for Fourth damn comment",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(7146),
                            IsDeleted = false,
                            ReviewId = new Guid("f124fd00-79f0-4e82-95ec-0afdef72996a"),
                            UserId = new Guid("019e9517-da08-47f2-8b33-6b7ccde04aed")
                        },
                        new
                        {
                            Id = new Guid("a93cbf15-3302-4bb0-8da8-e7888193b736"),
                            Author = "MemberFifth",
                            CommentText = "Random comment text for the fifth wholesome comment",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(7147),
                            IsDeleted = false,
                            ReviewId = new Guid("8f40b542-a3f9-447e-ad8a-7d61ad730bb6"),
                            UserId = new Guid("80b8434d-6d7e-42f5-a499-cdb3a635bb0e")
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(500);

                    b.Property<Guid>("TheatreId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TheatreId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c76ab3f4-e445-4e88-9359-a4a171f97862"),
                            Author = "MemberFifth",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(2090),
                            IsDeleted = false,
                            Rating = 5.0,
                            ReviewText = "This Theatre is halfway decent,but too expensive",
                            TheatreId = new Guid("3790ba40-4f3b-41c2-8b6e-8f92fbd9a69e")
                        },
                        new
                        {
                            Id = new Guid("03383637-e73b-4005-9b16-9a11168240bc"),
                            Author = "MemberFourth",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(2730),
                            IsDeleted = false,
                            Rating = 4.0,
                            ReviewText = "I liked it a lot ,but the seats were uncomfortable ",
                            TheatreId = new Guid("1930f972-5dbf-4fab-af28-eb3d6e71364b")
                        },
                        new
                        {
                            Id = new Guid("0ba3071d-a4a6-4e26-8923-3745aff05938"),
                            Author = "MemberThird",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(2736),
                            IsDeleted = false,
                            Rating = 3.0,
                            ReviewText = "Very fancy building,but the plays were old and poorly enacted",
                            TheatreId = new Guid("dee99c29-3a43-491e-b2a4-814bf77dc31f")
                        },
                        new
                        {
                            Id = new Guid("f124fd00-79f0-4e82-95ec-0afdef72996a"),
                            Author = "MemberSecond",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(2738),
                            IsDeleted = false,
                            Rating = 2.0,
                            ReviewText = "I am very disappointed, not worth the money I spent",
                            TheatreId = new Guid("75cb73a2-86a1-40f0-8e4e-6dd158050c6d")
                        },
                        new
                        {
                            Id = new Guid("8f40b542-a3f9-447e-ad8a-7d61ad730bb6"),
                            Author = "MemberFirst",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 340, DateTimeKind.Utc).AddTicks(2739),
                            IsDeleted = false,
                            Rating = 1.0,
                            ReviewText = "I was plesantly surpriced, the actors were very talented",
                            TheatreId = new Guid("50ee9f38-1484-4eb9-800a-39c98d6d8ff3")
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eecd046-8de2-4794-b91d-dffd4ede8c11"),
                            ConcurrencyStamp = "9eb1647f-348e-45a1-b53e-eca38d50658c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("b4ae87fb-2c3f-4837-b791-8cf6aaa5e763"),
                            ConcurrencyStamp = "02ca38b9-6269-4f63-a5e0-6240c7ae88f3",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Theatre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutInfo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<double?>("AverageRating");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double?>("CurrentUserRating");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("NumberOfReviews");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Theatres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3790ba40-4f3b-41c2-8b6e-8f92fbd9a69e"),
                            AboutInfo = "A Cultural Theatre for those with too much time on their hands",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5248),
                            ImagePath = "/assets/images/Italian.jpg",
                            IsDeleted = false,
                            Location = "7292 Dictum Av.San Antonio MI 47096",
                            Name = "FirstTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453401"
                        },
                        new
                        {
                            Id = new Guid("1930f972-5dbf-4fab-af28-eb3d6e71364b"),
                            AboutInfo = "A Rather nasty Theatre with rats everywhere even in the popcorn",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5914),
                            ImagePath = "/assets/images/Depth.jpg",
                            IsDeleted = false,
                            Location = "191-103 Integer Rd.Corona New Mexico 08219",
                            Name = "SecondTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453402"
                        },
                        new
                        {
                            Id = new Guid("dee99c29-3a43-491e-b2a4-814bf77dc31f"),
                            AboutInfo = "Same as the second Theatre but with character",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5919),
                            ImagePath = "/assets/images/LightHouse.jpg",
                            IsDeleted = false,
                            Location = "606-3727 Ullamcorper. StreetRoseville NH 11523",
                            Name = "ThirdTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453433"
                        },
                        new
                        {
                            Id = new Guid("75cb73a2-86a1-40f0-8e4e-6dd158050c6d"),
                            AboutInfo = "The door man is very polite,otherwise the Theatre is rather unpleasant",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5921),
                            ImagePath = "/assets/images/ThatsAllFolks.jpg",
                            IsDeleted = false,
                            Location = "Frederick Nebraska 20620",
                            Name = "FourthTheatre",
                            NumberOfReviews = 0,
                            Phone = "089645344"
                        },
                        new
                        {
                            Id = new Guid("50ee9f38-1484-4eb9-800a-39c98d6d8ff3"),
                            AboutInfo = "This Theatre has stood for 200 years and it shows then you enter",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5922),
                            ImagePath = "/assets/images/YellowTheatre.jpg",
                            IsDeleted = false,
                            Location = "Mankato Mississippi 96522",
                            Name = "FifthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453455"
                        },
                        new
                        {
                            Id = new Guid("7f888d1a-7be0-4ba5-9a8e-9cbf7bf9d25a"),
                            AboutInfo = "A Theatre for people with a finer taste then the average mortal man",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5923),
                            ImagePath = "/assets/images/CathedralTheatre.jpg",
                            IsDeleted = false,
                            Location = "Chaika str ,Varna city",
                            Name = "SixthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453466"
                        },
                        new
                        {
                            Id = new Guid("3e34e9e4-ff04-4463-ae27-3c295b715e88"),
                            AboutInfo = "There has never existed a fancier Theatre, the curtains are made o woven gold",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5927),
                            ImagePath = "/assets/images/ComfyHomeCinema.jpg",
                            IsDeleted = false,
                            Location = "TheOneTrueStreet str, BestCity city",
                            Name = "SeventhTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453477"
                        },
                        new
                        {
                            Id = new Guid("bb9bfebb-995f-4ed1-84a9-00c32be3f602"),
                            AboutInfo = "Same as the seventh Theatre but yet ,somehow the opposite",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5928),
                            ImagePath = "/assets/images/Foiey.jpg",
                            IsDeleted = false,
                            Location = "Gospodinovzi str, Sofia city",
                            Name = "EigthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453488"
                        },
                        new
                        {
                            Id = new Guid("42e96f5d-fe9e-4877-8e95-ed2a9f94ae06"),
                            AboutInfo = "This Theatre is very expensive,not well suited to poor people",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5929),
                            ImagePath = "/assets/images/Old.jpg",
                            IsDeleted = false,
                            Location = "Bullevard 27 str, Sofia city",
                            Name = "NinthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453499"
                        },
                        new
                        {
                            Id = new Guid("7ba7ac70-0d4b-49c0-810e-77939562597f"),
                            AboutInfo = "A ghetto Theatre which has the single purpose of getting robbed",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 339, DateTimeKind.Utc).AddTicks(5931),
                            ImagePath = "/assets/images/Wide.jpg",
                            IsDeleted = false,
                            Location = "Fifth and avenue str ,Cansas city",
                            Name = "TenthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453410"
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("BanReason");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("RoleName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb8b5e77-0296-400a-aa32-5887033a7be5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1cf0e9b-45b3-4831-8910-ffb3fa52b2da",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 321, DateTimeKind.Utc).AddTicks(8317),
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Martin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaDwds1kY9cTop2npqlv5Exuoq44q+yLlLcTxFfM1u0avE6qKOiz26bP1VzEiuktQ==",
                            PhoneNumber = "0895488533",
                            PhoneNumberConfirmed = false,
                            RoleName = "Administrator",
                            SecurityStamp = "*JUTF774DBHJIUUT",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4eac031b-26fd-40ba-bacf-603534229f79"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5dc0bf5-7a26-418b-83d0-023e4624177b",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 338, DateTimeKind.Utc).AddTicks(9161),
                            Email = "FirstMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Gosho",
                            NormalizedUserName = "MEMBERFIRST",
                            PasswordHash = "3CF19CDEA15EEE7CC3F2BA9C0879DCB00BCE00E06D9A3353B29DD2186FA1E7E7",
                            PhoneNumber = "0987453355",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "HHTF565DGH87NHFT",
                            TwoFactorEnabled = false,
                            UserName = "MemberFirst"
                        },
                        new
                        {
                            Id = new Guid("d73312b2-789c-4569-aadd-d5d9eb411506"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ff5c490-da63-4b23-9f1b-7795eb637bf2",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 338, DateTimeKind.Utc).AddTicks(9665),
                            Email = "SecondMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Pesho",
                            NormalizedUserName = "MEMBERSECOND",
                            PasswordHash = "033AD8354032D25A04D3859A9ACB7786EB3DE73F852879978028526F2C49932B",
                            PhoneNumber = "0987453345",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "JKIVDR4H7DJSKH",
                            TwoFactorEnabled = false,
                            UserName = "MemberSecond"
                        },
                        new
                        {
                            Id = new Guid("f53f6435-03d8-4567-9edb-48443dd520cc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c20fb7d-f256-46bd-b63d-a0d3cced6ac0",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 338, DateTimeKind.Utc).AddTicks(9705),
                            Email = "ThirdMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Minka",
                            NormalizedUserName = "MEMBERTHIRD",
                            PasswordHash = "6DF09E116C3095DD31B0952CCED5AAA34AF32CB0EA176F26ADCECB5F8C128083",
                            PhoneNumber = "0987453985",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "DA76A4HJ534UF7445T5E",
                            TwoFactorEnabled = false,
                            UserName = "MemberThird"
                        },
                        new
                        {
                            Id = new Guid("019e9517-da08-47f2-8b33-6b7ccde04aed"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9db0c738-0e2c-4176-8f76-7f1eecf70402",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 338, DateTimeKind.Utc).AddTicks(9731),
                            Email = "FourthMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Ivancho",
                            NormalizedUserName = "MEMBERFOURTH",
                            PasswordHash = "A8081515001427F49CCE5EFCCCDDAFEC449C2409D7C55BF003034FF33752E212",
                            PhoneNumber = "0987453825",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "UDIADFG564433HGS",
                            TwoFactorEnabled = false,
                            UserName = "MemberFourth"
                        },
                        new
                        {
                            Id = new Guid("80b8434d-6d7e-42f5-a499-cdb3a635bb0e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b740afe-95a0-4d83-a432-a3b0c6f8829b",
                            CreatedOn = new DateTime(2020, 1, 24, 18, 37, 46, 338, DateTimeKind.Utc).AddTicks(9757),
                            Email = "FifthMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Bai Ganio",
                            NormalizedUserName = "MEMBERFIFTH",
                            PasswordHash = "C5EE108214C790A2EC74ECBAF557498B03E6F00E90EDA64C1D01631776FE1B10",
                            PhoneNumber = "0987482355",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "DOHASIUDG7637242G5YG",
                            TwoFactorEnabled = false,
                            UserName = "MemberFifth"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("eb8b5e77-0296-400a-aa32-5887033a7be5"),
                            RoleId = new Guid("2eecd046-8de2-4794-b91d-dffd4ede8c11")
                        },
                        new
                        {
                            UserId = new Guid("4eac031b-26fd-40ba-bacf-603534229f79"),
                            RoleId = new Guid("b4ae87fb-2c3f-4837-b791-8cf6aaa5e763")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Ban", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Comment", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Review", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Theatre", "Theatre")
                        .WithMany("Reviews")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Theatre", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Theatres")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.User", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
