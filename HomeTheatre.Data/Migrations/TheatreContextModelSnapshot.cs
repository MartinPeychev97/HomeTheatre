// <auto-generated />
using System;
using HomeTheatre.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeTheatre.Data.Migrations
{
    [DbContext(typeof(TheatreContext))]
    partial class TheatreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<bool>("HasExpired");

                    b.Property<string>("ReasonBanned")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<Guid>("ReviewId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca381aa7-f19e-40ef-b7d5-fc42eeac1561"),
                            Author = "MemberFirst",
                            CommentText = "Random comment text for firstComment",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(5521),
                            IsDeleted = false,
                            ReviewId = new Guid("f161d9e0-5adf-4b18-a6e4-101cf222fbec"),
                            UserId = new Guid("23aa487a-0415-4eec-a24e-b7ebd40f599f")
                        },
                        new
                        {
                            Id = new Guid("628dd733-2af7-4330-a427-e472b45c6105"),
                            Author = "MemberSecond",
                            CommentText = "Random comment text for Second efin comment",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(6103),
                            IsDeleted = false,
                            ReviewId = new Guid("e29a01e0-0f75-47a5-95fe-885ee49fa3bd"),
                            UserId = new Guid("9e0fca6c-041b-454c-aa77-0ae2b57c1433")
                        },
                        new
                        {
                            Id = new Guid("bdba93ab-63f0-4d2a-8185-7f235aa116ce"),
                            Author = "MemberThird",
                            CommentText = "Random comment text for Third damn comment",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(6108),
                            IsDeleted = false,
                            ReviewId = new Guid("9f8e735d-95c5-4e0a-ac81-c2ac86fc1511"),
                            UserId = new Guid("50b6fd9c-64a6-45a0-9349-61b956701f46")
                        },
                        new
                        {
                            Id = new Guid("6d4f3a65-39b7-4655-911e-9ba9f7fbe878"),
                            Author = "MemberFourth",
                            CommentText = "Random comment text for Fourth damn comment",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(6109),
                            IsDeleted = false,
                            ReviewId = new Guid("e75d7195-21c2-48fd-8995-aa1d0ec73525"),
                            UserId = new Guid("07c8fca0-7bd3-4307-91e5-bc647ae8b24f")
                        },
                        new
                        {
                            Id = new Guid("7a74d015-a525-4fab-8d1b-8eadf73dbb19"),
                            Author = "MemberFifth",
                            CommentText = "Random comment text for the fifth wholesome comment",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(6110),
                            IsDeleted = false,
                            ReviewId = new Guid("1eecb5c8-1936-4be2-8dca-7b5d616e7fd9"),
                            UserId = new Guid("f4ad45b6-7d01-45d6-b433-2947bf8c30ab")
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(500);

                    b.Property<Guid>("TheatreId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TheatreId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f161d9e0-5adf-4b18-a6e4-101cf222fbec"),
                            Author = "MemberFifth",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(951),
                            IsDeleted = false,
                            Rating = 5.0,
                            ReviewText = "This Theatre is halfway decent,but too expensive",
                            TheatreId = new Guid("9eebfae7-7ed7-49f4-a48a-620e6a8829d5")
                        },
                        new
                        {
                            Id = new Guid("e29a01e0-0f75-47a5-95fe-885ee49fa3bd"),
                            Author = "MemberFourth",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(1585),
                            IsDeleted = false,
                            Rating = 4.0,
                            ReviewText = "I liked it a lot ,but the seats were uncomfortable ",
                            TheatreId = new Guid("307e8c14-cce6-4c1d-89b1-50154259d1de")
                        },
                        new
                        {
                            Id = new Guid("9f8e735d-95c5-4e0a-ac81-c2ac86fc1511"),
                            Author = "MemberThird",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(1601),
                            IsDeleted = false,
                            Rating = 3.0,
                            ReviewText = "Very fancy building,but the plays were old and poorly enacted",
                            TheatreId = new Guid("5722c84a-e31d-4f9d-8124-33c3512146fc")
                        },
                        new
                        {
                            Id = new Guid("e75d7195-21c2-48fd-8995-aa1d0ec73525"),
                            Author = "MemberSecond",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(1604),
                            IsDeleted = false,
                            Rating = 2.0,
                            ReviewText = "I am very disappointed, not worth the money I spent",
                            TheatreId = new Guid("73dd2042-6248-42f1-a092-14c1998e7586")
                        },
                        new
                        {
                            Id = new Guid("1eecb5c8-1936-4be2-8dca-7b5d616e7fd9"),
                            Author = "MemberFirst",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 630, DateTimeKind.Utc).AddTicks(1606),
                            IsDeleted = false,
                            Rating = 1.0,
                            ReviewText = "I was plesantly surpriced, the actors were very talented",
                            TheatreId = new Guid("eeec4bb2-8bf2-4202-94bf-c2b2e461b7a7")
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62049f54-74c6-4201-b25f-4b0e1cb309ab"),
                            ConcurrencyStamp = "03b386c3-b8e1-47b4-86cb-fa83c3a1322a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("b63b0ce8-4974-46fc-a1e1-553eebaaa31d"),
                            ConcurrencyStamp = "9a6634aa-b0ca-4faa-8a41-c4d3c1c03b80",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Theatre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutInfo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<double?>("AverageRating");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double?>("CurrentUserRating");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("NumberOfReviews");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Theatres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9eebfae7-7ed7-49f4-a48a-620e6a8829d5"),
                            AboutInfo = "A Cultural Theatre for those with too much time on their hands",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(4825),
                            ImagePath = "/assets/images/Italian.jpg",
                            IsDeleted = false,
                            Location = "7292 Dictum Av.San Antonio MI 47096",
                            Name = "FirstTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453401"
                        },
                        new
                        {
                            Id = new Guid("307e8c14-cce6-4c1d-89b1-50154259d1de"),
                            AboutInfo = "A Rather nasty Theatre with rats everywhere even in the popcorn",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5454),
                            ImagePath = "/assets/images/Depth.jpg",
                            IsDeleted = false,
                            Location = "191-103 Integer Rd.Corona New Mexico 08219",
                            Name = "SecondTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453402"
                        },
                        new
                        {
                            Id = new Guid("5722c84a-e31d-4f9d-8124-33c3512146fc"),
                            AboutInfo = "Same as the second Theatre but with character",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5459),
                            ImagePath = "/assets/images/LightHouse.jpg",
                            IsDeleted = false,
                            Location = "606-3727 Ullamcorper. StreetRoseville NH 11523",
                            Name = "ThirdTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453433"
                        },
                        new
                        {
                            Id = new Guid("73dd2042-6248-42f1-a092-14c1998e7586"),
                            AboutInfo = "The door man is very polite,otherwise the Theatre is rather unpleasant",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5460),
                            ImagePath = "/assets/images/ThatsAllFolks.jpg",
                            IsDeleted = false,
                            Location = "Frederick Nebraska 20620",
                            Name = "FourthTheatre",
                            NumberOfReviews = 0,
                            Phone = "089645344"
                        },
                        new
                        {
                            Id = new Guid("eeec4bb2-8bf2-4202-94bf-c2b2e461b7a7"),
                            AboutInfo = "This Theatre has stood for 200 years and it shows then you enter",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5463),
                            ImagePath = "/assets/images/YellowTheatre.jpg",
                            IsDeleted = false,
                            Location = "Mankato Mississippi 96522",
                            Name = "FifthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453455"
                        },
                        new
                        {
                            Id = new Guid("ca8dab8d-766b-4d34-9d00-e669b60ddf73"),
                            AboutInfo = "A Theatre for people with a finer taste then the average mortal man",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5464),
                            ImagePath = "/assets/images/CathedralTheatre.jpg",
                            IsDeleted = false,
                            Location = "Chaika str ,Varna city",
                            Name = "SixthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453466"
                        },
                        new
                        {
                            Id = new Guid("2a286bce-471a-4c59-944e-bc2aac278adc"),
                            AboutInfo = "There has never existed a fancier Theatre, the curtains are made o woven gold",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5466),
                            ImagePath = "/assets/images/ComfyHomeCinema.jpg",
                            IsDeleted = false,
                            Location = "TheOneTrueStreet str, BestCity city",
                            Name = "SeventhTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453477"
                        },
                        new
                        {
                            Id = new Guid("71e536ab-302d-44f8-9de7-1897e6879ad6"),
                            AboutInfo = "Same as the seventh Theatre but yet ,somehow the opposite",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5467),
                            ImagePath = "/assets/images/Foiey.jpg",
                            IsDeleted = false,
                            Location = "Gospodinovzi str, Sofia city",
                            Name = "EigthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453488"
                        },
                        new
                        {
                            Id = new Guid("8d678965-c49b-41f3-ba7a-55cdb6f959db"),
                            AboutInfo = "This Theatre is very expensive,not well suited to poor people",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5468),
                            ImagePath = "/assets/images/Old.jpg",
                            IsDeleted = false,
                            Location = "Bullevard 27 str, Sofia city",
                            Name = "NinthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453499"
                        },
                        new
                        {
                            Id = new Guid("a701a867-b539-4cb0-9bdc-c60f04291800"),
                            AboutInfo = "A ghetto Theatre which has the single purpose of getting robbed",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 629, DateTimeKind.Utc).AddTicks(5469),
                            ImagePath = "/assets/images/Wide.jpg",
                            IsDeleted = false,
                            Location = "Fifth and avenue str ,Cansas city",
                            Name = "TenthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453410"
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("BanReason");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("RoleName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7e11d9e-6c04-4a4c-87ab-749014c46bf0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "886475b7-f87a-41fd-88b5-bbfbd157942e",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 601, DateTimeKind.Utc).AddTicks(6571),
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Martin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELiMIRlF+loELw4LyJJc76u2fejOJJdQdLvK9WR30m0ulR25S+kX98siWUtdSa4BCA==",
                            PhoneNumber = "0895488533",
                            PhoneNumberConfirmed = false,
                            RoleName = "Administrator",
                            SecurityStamp = "*JUTF774DBHJIUUT",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("23aa487a-0415-4eec-a24e-b7ebd40f599f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa310e56-91e2-4df6-a914-148f6da4df23",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 628, DateTimeKind.Utc).AddTicks(8249),
                            Email = "FirstMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Gosho",
                            NormalizedUserName = "MEMBERFIRST",
                            PasswordHash = "3CF19CDEA15EEE7CC3F2BA9C0879DCB00BCE00E06D9A3353B29DD2186FA1E7E7",
                            PhoneNumber = "0987453355",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "HHTF565DGH87NHFT",
                            TwoFactorEnabled = false,
                            UserName = "MemberFirst"
                        },
                        new
                        {
                            Id = new Guid("9e0fca6c-041b-454c-aa77-0ae2b57c1433"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e74674d1-e1a1-4ef0-b917-4757343668a7",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 628, DateTimeKind.Utc).AddTicks(8736),
                            Email = "SecondMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Pesho",
                            NormalizedUserName = "MEMBERSECOND",
                            PasswordHash = "033AD8354032D25A04D3859A9ACB7786EB3DE73F852879978028526F2C49932B",
                            PhoneNumber = "0987453345",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "JKIVDR4H7DJSKH",
                            TwoFactorEnabled = false,
                            UserName = "MemberSecond"
                        },
                        new
                        {
                            Id = new Guid("50b6fd9c-64a6-45a0-9349-61b956701f46"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e672ea2a-689a-4c06-9639-06cb32890dc4",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 628, DateTimeKind.Utc).AddTicks(8784),
                            Email = "ThirdMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Minka",
                            NormalizedUserName = "MEMBERTHIRD",
                            PasswordHash = "6DF09E116C3095DD31B0952CCED5AAA34AF32CB0EA176F26ADCECB5F8C128083",
                            PhoneNumber = "0987453985",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "DA76A4HJ534UF7445T5E",
                            TwoFactorEnabled = false,
                            UserName = "MemberThird"
                        },
                        new
                        {
                            Id = new Guid("07c8fca0-7bd3-4307-91e5-bc647ae8b24f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76e39e94-cda4-49eb-ac01-10c6b442b20a",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 628, DateTimeKind.Utc).AddTicks(8812),
                            Email = "FourthMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Ivancho",
                            NormalizedUserName = "MEMBERFOURTH",
                            PasswordHash = "A8081515001427F49CCE5EFCCCDDAFEC449C2409D7C55BF003034FF33752E212",
                            PhoneNumber = "0987453825",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "UDIADFG564433HGS",
                            TwoFactorEnabled = false,
                            UserName = "MemberFourth"
                        },
                        new
                        {
                            Id = new Guid("f4ad45b6-7d01-45d6-b433-2947bf8c30ab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee61c46c-8b87-4f46-9aca-77dd4a19010c",
                            CreatedOn = new DateTime(2020, 1, 24, 16, 39, 38, 628, DateTimeKind.Utc).AddTicks(8837),
                            Email = "FifthMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Bai Ganio",
                            NormalizedUserName = "MEMBERFIFTH",
                            PasswordHash = "C5EE108214C790A2EC74ECBAF557498B03E6F00E90EDA64C1D01631776FE1B10",
                            PhoneNumber = "0987482355",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            SecurityStamp = "DOHASIUDG7637242G5YG",
                            TwoFactorEnabled = false,
                            UserName = "MemberFifth"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f7e11d9e-6c04-4a4c-87ab-749014c46bf0"),
                            RoleId = new Guid("62049f54-74c6-4201-b25f-4b0e1cb309ab")
                        },
                        new
                        {
                            UserId = new Guid("23aa487a-0415-4eec-a24e-b7ebd40f599f"),
                            RoleId = new Guid("b63b0ce8-4974-46fc-a1e1-553eebaaa31d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Ban", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Comment", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Review", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Theatre", "Theatre")
                        .WithMany("Reviews")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Theatre", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Theatres")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.User", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
