// <auto-generated />
using System;
using HomeTheatre.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeTheatre.Data.Migrations
{
    [DbContext(typeof(TheatreContext))]
    partial class TheatreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<bool>("HasExpired");

                    b.Property<string>("ReasonBanned")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<Guid>("ReviewId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b9ae073-06ff-4964-a8b0-aff1111e94fc"),
                            Author = "MemberFirst",
                            CommentText = "Random comment text for firstComment",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 77, DateTimeKind.Utc).AddTicks(1315),
                            IsDeleted = false,
                            ReviewId = new Guid("42270575-8fad-4c95-be41-347dd08d35e8"),
                            UserId = new Guid("5dd1afd4-bda3-49ea-818f-835e764b2e56")
                        },
                        new
                        {
                            Id = new Guid("53d3cd91-19c8-4b12-ba0e-0a2d60372448"),
                            Author = "MemberSecond",
                            CommentText = "Random comment text for Second efin comment",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 77, DateTimeKind.Utc).AddTicks(2000),
                            IsDeleted = false,
                            ReviewId = new Guid("606dc8f4-329c-4544-a067-2c846ed33421"),
                            UserId = new Guid("6879f310-c67c-4ff8-8020-29509f0a9fb7")
                        },
                        new
                        {
                            Id = new Guid("7a8209e4-47ee-43f5-b1e7-6a57a23103c6"),
                            Author = "MemberThird",
                            CommentText = "Random comment text for Third damn comment",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 77, DateTimeKind.Utc).AddTicks(2006),
                            IsDeleted = false,
                            ReviewId = new Guid("8ef60a6a-f3ae-46e5-b2c9-7ca4e81560c5"),
                            UserId = new Guid("ca4887dc-4473-413b-8366-68020de7f202")
                        },
                        new
                        {
                            Id = new Guid("4d725188-3480-43b5-afd2-88a53790f2c3"),
                            Author = "MemberFourth",
                            CommentText = "Random comment text for Fourth damn comment",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 77, DateTimeKind.Utc).AddTicks(2008),
                            IsDeleted = false,
                            ReviewId = new Guid("2ddc7928-f6a9-4e34-a7b3-8bcc16776729"),
                            UserId = new Guid("227dfe87-ab0f-486d-bfbe-8d8d2673c0fd")
                        },
                        new
                        {
                            Id = new Guid("616f26ce-bc67-40ef-9f7b-2d248e1dcd50"),
                            Author = "MemberFifth",
                            CommentText = "Random comment text for the fifth wholesome comment",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 77, DateTimeKind.Utc).AddTicks(2009),
                            IsDeleted = false,
                            ReviewId = new Guid("7d5b838b-0464-4283-922b-37b0214934a7"),
                            UserId = new Guid("7ffada38-c1f9-4f2b-b935-4075a1acaf89")
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<double>("Rating");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(500);

                    b.Property<Guid>("TheatreId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TheatreId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42270575-8fad-4c95-be41-347dd08d35e8"),
                            Author = "MemberFifth",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 76, DateTimeKind.Utc).AddTicks(6323),
                            IsDeleted = false,
                            Rating = 5.0,
                            ReviewText = "This Theatre is halfway decent,but too expensive",
                            TheatreId = new Guid("710bfecb-b41f-4d74-bfb9-1d45a8ea5c04")
                        },
                        new
                        {
                            Id = new Guid("606dc8f4-329c-4544-a067-2c846ed33421"),
                            Author = "MemberFourth",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 76, DateTimeKind.Utc).AddTicks(6931),
                            IsDeleted = false,
                            Rating = 4.0,
                            ReviewText = "I liked it a lot ,but the seats were uncomfortable ",
                            TheatreId = new Guid("79cfd34f-b1e8-4163-928f-1d2fdf528f1d")
                        },
                        new
                        {
                            Id = new Guid("8ef60a6a-f3ae-46e5-b2c9-7ca4e81560c5"),
                            Author = "MemberThird",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 76, DateTimeKind.Utc).AddTicks(6936),
                            IsDeleted = false,
                            Rating = 3.0,
                            ReviewText = "Very fancy building,but the plays were old and poorly enacted",
                            TheatreId = new Guid("a33d4a98-7720-4175-a4ca-768aec7d839f")
                        },
                        new
                        {
                            Id = new Guid("2ddc7928-f6a9-4e34-a7b3-8bcc16776729"),
                            Author = "MemberSecond",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 76, DateTimeKind.Utc).AddTicks(6937),
                            IsDeleted = false,
                            Rating = 2.0,
                            ReviewText = "I am very disappointed, not worth the money I spent",
                            TheatreId = new Guid("02fe6954-a57c-473c-99f5-3c0bbe057f63")
                        },
                        new
                        {
                            Id = new Guid("7d5b838b-0464-4283-922b-37b0214934a7"),
                            Author = "MemberFirst",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 76, DateTimeKind.Utc).AddTicks(6939),
                            IsDeleted = false,
                            Rating = 1.0,
                            ReviewText = "I was plesantly surpriced, the actors were very talented",
                            TheatreId = new Guid("4b0cf076-4682-4c9e-9720-9b8f3018a9ea")
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fc81859-fc08-43fe-b30e-cd30aff5b32c"),
                            ConcurrencyStamp = "e06047ee-cc27-48b6-88ec-7c3f2000df13",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("43bb5358-96e3-4f08-8699-0e84880b2870"),
                            ConcurrencyStamp = "0a642bfd-d936-4dcb-b124-2f55b14ab564",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Theatre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutInfo")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<double?>("AverageRating");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double?>("CurrentUserRating");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("NumberOfReviews");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Theatres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("710bfecb-b41f-4d74-bfb9-1d45a8ea5c04"),
                            AboutInfo = "A Cultural Theatre for those with too much time on their hands",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(8182),
                            ImagePath = "/assets/images/Italian.jpg",
                            IsDeleted = false,
                            Location = "7292 Dictum Av.San Antonio MI 47096",
                            Name = "FirstTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453401"
                        },
                        new
                        {
                            Id = new Guid("79cfd34f-b1e8-4163-928f-1d2fdf528f1d"),
                            AboutInfo = "A Rather nasty Theatre with rats everywhere even in the popcorn",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9282),
                            ImagePath = "/assets/images/Depth.jpg",
                            IsDeleted = false,
                            Location = "191-103 Integer Rd.Corona New Mexico 08219",
                            Name = "SecondTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453402"
                        },
                        new
                        {
                            Id = new Guid("a33d4a98-7720-4175-a4ca-768aec7d839f"),
                            AboutInfo = "Same as the second Theatre but with character",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9288),
                            ImagePath = "/assets/images/LightHouse.jpg",
                            IsDeleted = false,
                            Location = "606-3727 Ullamcorper. StreetRoseville NH 11523",
                            Name = "ThirdTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453433"
                        },
                        new
                        {
                            Id = new Guid("02fe6954-a57c-473c-99f5-3c0bbe057f63"),
                            AboutInfo = "The door man is very polite,otherwise the Theatre is rather unpleasant",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9290),
                            ImagePath = "/assets/images/ThatsAllFolks.jpg",
                            IsDeleted = false,
                            Location = "Frederick Nebraska 20620",
                            Name = "FourthTheatre",
                            NumberOfReviews = 0,
                            Phone = "089645344"
                        },
                        new
                        {
                            Id = new Guid("4b0cf076-4682-4c9e-9720-9b8f3018a9ea"),
                            AboutInfo = "This Theatre has stood for 200 years and it shows then you enter",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9291),
                            ImagePath = "/assets/images/YellowTheatre.jpg",
                            IsDeleted = false,
                            Location = "Mankato Mississippi 96522",
                            Name = "FifthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453455"
                        },
                        new
                        {
                            Id = new Guid("b3ce502d-7c99-4de8-afaf-d8e6bc5b2950"),
                            AboutInfo = "A Theatre for people with a finer taste then the average mortal man",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9293),
                            ImagePath = "/assets/images/CathedralTheatre.jpg",
                            IsDeleted = false,
                            Location = "Chaika str ,Varna city",
                            Name = "SixthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453466"
                        },
                        new
                        {
                            Id = new Guid("037aada4-8949-407a-a7f5-626fef137af4"),
                            AboutInfo = "There has never existed a fancier Theatre, the curtains are made o woven gold",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9295),
                            ImagePath = "/assets/images/ComfyHomeCinema.jpg",
                            IsDeleted = false,
                            Location = "TheOneTrueStreet str, BestCity city",
                            Name = "SeventhTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453477"
                        },
                        new
                        {
                            Id = new Guid("71b2137b-a854-4b3f-b2d1-a0f3ee904159"),
                            AboutInfo = "Same as the seventh Theatre but yet ,somehow the opposite",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9296),
                            ImagePath = "/assets/images/Foiey.jpg",
                            IsDeleted = false,
                            Location = "Gospodinovzi str, Sofia city",
                            Name = "EigthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453488"
                        },
                        new
                        {
                            Id = new Guid("359f3eca-e665-4ded-944e-0c2e8dbe85b3"),
                            AboutInfo = "This Theatre is very expensive,not well suited to poor people",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9297),
                            ImagePath = "/assets/images/Old.jpg",
                            IsDeleted = false,
                            Location = "Bullevard 27 str, Sofia city",
                            Name = "NinthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453499"
                        },
                        new
                        {
                            Id = new Guid("53e699a5-8718-4032-8cd4-fed4ae2196f5"),
                            AboutInfo = "A ghetto Theatre which has the single purpose of getting robbed",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(9298),
                            ImagePath = "/assets/images/Wide.jpg",
                            IsDeleted = false,
                            Location = "Fifth and avenue str ,Cansas city",
                            Name = "TenthTheatre",
                            NumberOfReviews = 0,
                            Phone = "0896453410"
                        });
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("BanReason");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("RoleName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e851fd4-2dba-4af3-8798-66481f5d4fc9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b0cb1b8-004e-42e7-8ca1-aae1a3e0229b",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 59, DateTimeKind.Utc).AddTicks(512),
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Martin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7W/o9nLzufbQswg64UjInefQdCaEJMcL0FQbY+6HQvGu/tzvAPUG3qYKGW31Y5PQ==",
                            PhoneNumber = "0895488533",
                            PhoneNumberConfirmed = false,
                            RoleName = "Administrator",
                            SecurityStamp = "*JUTF774DBHJIUUT",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("5dd1afd4-bda3-49ea-818f-835e764b2e56"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c018c528-8194-427f-bbec-18cf995e4f57",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(2140),
                            Email = "FirstMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Gosho",
                            NormalizedUserName = "MEMBERFIRST",
                            PasswordHash = "3CF19CDEA15EEE7CC3F2BA9C0879DCB00BCE00E06D9A3353B29DD2186FA1E7E7",
                            PhoneNumber = "0987453355",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            TwoFactorEnabled = false,
                            UserName = "MemberFirst"
                        },
                        new
                        {
                            Id = new Guid("6879f310-c67c-4ff8-8020-29509f0a9fb7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee0fc78c-a5e1-4e2a-afb6-d16c1686c099",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(2597),
                            Email = "SecondMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Pesho",
                            NormalizedUserName = "MEMBERSECOND",
                            PasswordHash = "033AD8354032D25A04D3859A9ACB7786EB3DE73F852879978028526F2C49932B",
                            PhoneNumber = "0987453345",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            TwoFactorEnabled = false,
                            UserName = "MemberSecond"
                        },
                        new
                        {
                            Id = new Guid("ca4887dc-4473-413b-8366-68020de7f202"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff3d8f3e-f0e4-450e-b150-dca8e6b4c28b",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(2645),
                            Email = "ThirdMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Minka",
                            NormalizedUserName = "MEMBERTHIRD",
                            PasswordHash = "6DF09E116C3095DD31B0952CCED5AAA34AF32CB0EA176F26ADCECB5F8C128083",
                            PhoneNumber = "0987453985",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            TwoFactorEnabled = false,
                            UserName = "MemberThird"
                        },
                        new
                        {
                            Id = new Guid("227dfe87-ab0f-486d-bfbe-8d8d2673c0fd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "553fb661-882b-4d96-9f9c-3743d6305704",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(2674),
                            Email = "FourthMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Ivancho",
                            NormalizedUserName = "MEMBERFOURTH",
                            PasswordHash = "A8081515001427F49CCE5EFCCCDDAFEC449C2409D7C55BF003034FF33752E212",
                            PhoneNumber = "0987453825",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            TwoFactorEnabled = false,
                            UserName = "MemberFourth"
                        },
                        new
                        {
                            Id = new Guid("7ffada38-c1f9-4f2b-b935-4075a1acaf89"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f37483d-90f9-43a3-beb2-26d2c1d5c8cd",
                            CreatedOn = new DateTime(2020, 1, 23, 14, 1, 34, 75, DateTimeKind.Utc).AddTicks(2757),
                            Email = "FifthMember@gmail.com",
                            EmailConfirmed = false,
                            IsBanned = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            Name = "Bai Ganio",
                            NormalizedUserName = "MEMBERFIFTH",
                            PasswordHash = "C5EE108214C790A2EC74ECBAF557498B03E6F00E90EDA64C1D01631776FE1B10",
                            PhoneNumber = "0987482355",
                            PhoneNumberConfirmed = false,
                            RoleName = "Member",
                            TwoFactorEnabled = false,
                            UserName = "MemberFifth"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5e851fd4-2dba-4af3-8798-66481f5d4fc9"),
                            RoleId = new Guid("3fc81859-fc08-43fe-b30e-cd30aff5b32c")
                        },
                        new
                        {
                            UserId = new Guid("5dd1afd4-bda3-49ea-818f-835e764b2e56"),
                            RoleId = new Guid("43bb5358-96e3-4f08-8699-0e84880b2870")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Ban", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Comment", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Review", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Theatre", "Theatre")
                        .WithMany("Reviews")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.Theatre", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User", "User")
                        .WithMany("Theatres")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeTheatre.Data.DbModels.User", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HomeTheatre.Data.DbModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
